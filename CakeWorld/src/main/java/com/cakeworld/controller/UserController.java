package com.cakeworld.controller;

import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cakeworld.main.UserRepository;
import com.cakeworld.model.User;


@Controller    // This means that this class is a Controller
public class UserController {
	 // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private UserRepository userRepository;
	
	
	
	@RequestMapping(value = "/registerUser", method = RequestMethod.GET) 
    public Iterable<User> getUser(Model model) {
		Iterable<User> users = userRepository.findAll(); 
        return users;
    }
	@RequestMapping(value = "/login", method = RequestMethod.POST) 
    public String login(@ModelAttribute("users") 
    		User user,HttpSession session, HttpServletResponse response,
    		@CookieValue(value="foo" , defaultValue = "hello") String fooCookie) {
		User userPersisted;
		if(session.getAttribute("userDBSession")!=null){
			 userPersisted = (User)session.getAttribute("userDBSession");
		}else {
			if(userRepository.findByEmail(user.getEmail())!=null && userRepository.findByEmail(user.getEmail()).size() >0 ){
				userPersisted = userRepository.findByEmail(user.getEmail()).get(0);
				session.setAttribute("userDBSession",userPersisted);
			} else {
				return  "register";
			}
				
		}
		System.out.println("Foo Cookie is "+ fooCookie);
		Cookie a = new Cookie("foo", "bye");
		a.setMaxAge(1000);
		response.addCookie(a);

		if(userPersisted.getPassword().equals(user.getPassword()))
			return "index";
		
		return "login";
    }
	@RequestMapping(value = "/registerUser", method = RequestMethod.POST) 
	    public String registerUser(@ModelAttribute("users")  User user) {
			List<User> emailList = userRepository.findByEmail(user.getEmail());
			for(User userPersisted :emailList) {
				if(userPersisted.getEmail().equalsIgnoreCase(user.getEmail())){
					userPersisted.setPassword(user.getPassword());
					userRepository.save(userPersisted);
				return"login";	
				}
			}
		 	userRepository.save(user);
	        return "login";
	    }
	@RequestMapping("/add")// Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
	@RequestMapping("/mohit")
	public @ResponseBody String getMohit() {
		// This returns a JSON or XML with the users
		return "Mohit";
	}
	@RequestMapping("/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}